import {Vector} from "./Vector";

import {Renderer} from "./Renderer"

import {Asteroid} from "./Asteroid";
import {Bullet} from "./Bullet";
import {Explosion} from "./Explosion";
import {PlayerShip} from "./PlayerShip";

@external("env", "playLaser")
export declare function playLaser(): void;

@external("env", "playExplosion")
export declare function playExplosion(): void;

export class AsteroidShooter {
  // singleton
  public static SN: AsteroidShooter;  // AsteroidShooter singleton

  // game objects
  public asteroidArray: Array<Asteroid> = new Array<Asteroid>();
  public explosionArray: Array<Explosion> = new Array<Explosion>();
  public bulletArray: Array<Bullet> = new Array<Bullet>();
  public playerShip: PlayerShip = new PlayerShip();

  // array indexes
  public asteroidIndex: i32 = 0;
  public explosionIndex: i32 = 0;
  public bulletIndex: i32 = 0;

  // shot cooldown variables
  static readonly LAUNCH_WAIT: i32 = 250;
  public bulletCoolDown: i32 = 50;

  constructor() {    
    // set the singleton
    if( AsteroidShooter.SN == null ) {
      AsteroidShooter.SN = this;
    }

    // creating a renderer will set the singleton for the Renderer class
    // this constant will exit scope at the end of the constructor, so
    // I will access the Renderer using Renderer.SN
    new Renderer();

    // create the objects for the asteroid object pool
    for( var i: i32 = 0; i < 50; i++ ) {
      this.asteroidArray.push( new Asteroid() );
    }

    // activate five asteroids for the beginning of the game
    this.activateAsteroid(0.25, -0.5,  0.5 );
    this.activateAsteroid(0.25,  0.5,  0.5 );
    this.activateAsteroid(0.25, -0.5, -0.5 );
    this.activateAsteroid(0.25,  0.5, -0.5 );
    this.activateAsteroid(0.25,  0.7, -0.2 );

    // create the objects for the explosion object pool
    for( i = 0; i < 30; i++ ) {
      this.explosionArray.push( new Explosion() );
    }

    // create the objects for the bullet object pool
    for( i = 0; i < 30; i++ ) {
      this.bulletArray.push( new Bullet() );
    }
    
  }

  // each frame check to see if any asteroids remain
  public respawnCheck(): void {
    // check for any asteroids that remain
    for( var i: i32 = 0; i < this.asteroidArray.length; i++ ) {
      if( this.asteroidArray[i].visible == true ) {
        // if there is a visible asteroid, return
        return;
      }
    }

    // if all of the asteroids have been destroyed, spawn five more
    this.activateAsteroid(0.25, -0.5,  0.5);
    this.activateAsteroid(0.25,  0.5,  0.5);
    this.activateAsteroid(0.25, -0.5, -0.5);
    this.activateAsteroid(0.25,  0.5, -0.5);
    this.activateAsteroid(0.25,  0.7, -0.2);
  }

  // when an asteroid is destroyed, activate an explosion from the explosionArray
  public activateExplosion(x: f32, y: f32 ): void {
      let count: i32 = 0;
      // advance the explosion index to get the next explosion in the pool
      this.explosionIndex++;

      // if the index is greater than the number of objects in the pool, reset it to 0
      if( this.explosionIndex >= this.explosionArray.length ) {
        this.explosionIndex = 0;
      }      
      
      while( this.explosionArray[this.explosionIndex].visible == true ) {
        this.explosionIndex++;
        if( this.explosionIndex >= this.explosionArray.length ) {
          this.explosionIndex = 0;
        }      
        if( count++ > this.explosionArray.length ) return;
      }
      this.explosionArray[this.explosionIndex].activate(x, y);
  }

  public launchBullet(): void {
      let count: i32 = 0;
      this.bulletIndex++;
      if( this.bulletIndex >= this.bulletArray.length ) {
        this.bulletIndex = 0;
      }      
      while( this.bulletArray[this.bulletIndex].visible == true ) {
        this.bulletIndex++;
        if( this.bulletIndex >= this.bulletArray.length ) {
          this.bulletIndex = 0;
        }
        if( count++ > this.bulletArray.length ) return;
      }
      this.bulletArray[this.bulletIndex].launch(AsteroidShooter.SN.playerShip.rotation, 
                                                AsteroidShooter.SN.playerShip.position );
  }

  public activateAsteroid(size: f32, x: f32, y: f32 ): void {
      let count: i32 = 0;
      this.asteroidIndex++;
      if( this.asteroidIndex >= this.asteroidArray.length ) {
        this.asteroidIndex = 0;
      }      
      while( this.asteroidArray[this.asteroidIndex].visible == true ) {
        this.asteroidIndex++;
        if( this.asteroidIndex >= this.asteroidArray.length ) {
          this.asteroidIndex = 0;
        }
        if( count++ > this.asteroidArray.length ) return;
      }
      this.asteroidArray[this.asteroidIndex].activate(size, x, y);
  }
}

new AsteroidShooter();

export function LoopCallback( delta_ms: i32, 
                        leftKeyPress: bool, rightKeyPress: bool, 
                        upKeyPress: bool, downKeyPress: bool,
                        spaceKeyPress: bool ): void {
  AsteroidShooter.SN.bulletCoolDown -= delta_ms;

  Renderer.SN.clear();
  Renderer.DELTA = <f32>delta_ms / 1000.0;

  for( var i: i32 = 0; i < AsteroidShooter.SN.asteroidArray.length; i++ ) {
    AsteroidShooter.SN.asteroidArray[i].move();
    AsteroidShooter.SN.asteroidArray[i].draw();
  }

  if( leftKeyPress ) {
    AsteroidShooter.SN.playerShip.turnLeft();  
  }
  if( rightKeyPress ) {
    AsteroidShooter.SN.playerShip.turnRight();  
  }
  if( upKeyPress ) {
    AsteroidShooter.SN.playerShip.accelerate();  
  }

  if( spaceKeyPress && AsteroidShooter.SN.bulletCoolDown <= 0 ) {
    AsteroidShooter.SN.bulletCoolDown = AsteroidShooter.LAUNCH_WAIT;
    AsteroidShooter.SN.launchBullet();
    playLaser();
  }

  for( i = 0; i < AsteroidShooter.SN.bulletArray.length; i++ ) {
    if( AsteroidShooter.SN.bulletArray[i].visible == true ) {
      AsteroidShooter.SN.bulletArray[i].move();
      AsteroidShooter.SN.bulletArray[i].draw();
      for( var j: i32 = 0; j < AsteroidShooter.SN.asteroidArray.length; j++ ) {
        if( AsteroidShooter.SN.asteroidArray[j].visible == true && 
            AsteroidShooter.SN.bulletArray[i].hitTest(AsteroidShooter.SN.asteroidArray[j]) ) {
          AsteroidShooter.SN.activateExplosion(
            AsteroidShooter.SN.asteroidArray[j].position.x,
            AsteroidShooter.SN.asteroidArray[j].position.y
          );

          playExplosion();

          if( AsteroidShooter.SN.asteroidArray[j].scale >= 0.05 ) {
            const half_scale = AsteroidShooter.SN.asteroidArray[j].scale / 2;
            const asteroid_x = AsteroidShooter.SN.asteroidArray[j].position.x;
            const asteroid_y = AsteroidShooter.SN.asteroidArray[j].position.y;
            AsteroidShooter.SN.activateAsteroid(
                          half_scale,
                          asteroid_x + half_scale, 
                          asteroid_y - half_scale );            
            AsteroidShooter.SN.activateAsteroid(
                          half_scale, 
                          asteroid_x - half_scale, 
                          asteroid_y + half_scale );            
          }

          AsteroidShooter.SN.bulletArray[i].visible = false;
          AsteroidShooter.SN.asteroidArray[j].visible = false;
          break;
        }
      }
    }
  }

  for( i = 0; i < AsteroidShooter.SN.explosionArray.length; i++ ) {
    AsteroidShooter.SN.explosionArray[i].move();
    AsteroidShooter.SN.explosionArray[i].draw();
  }
  AsteroidShooter.SN.playerShip.move();
  AsteroidShooter.SN.playerShip.draw();

  AsteroidShooter.SN.respawnCheck();

}

