import {Asteroid} from "./Asteroid";
import {Vector} from "./Vector";
import {Explosion} from "./Explosion";
import {Bullet} from "./Bullet";
import {PlayerShip} from "./PlayerShip";
import {Renderer} from "./Renderer"

export class AsteroidShooter {
  public static SN: AsteroidShooter;  // ASTEROID SHOOTER SINGLETON
  public static TWO_PI: f64 = 6.2831853;
  public static DELTA_MS: i32 = 0;
  public static RENDERER: Renderer;
  public static LAUNCH_WAIT: i32 = 250;

  // KEY PRESS FLAGS
  public static LEFT_KEY_PRESS: bool = false;
  public static RIGHT_KEY_PRESS: bool = false;
  public static UP_KEY_PRESS: bool = false;
  public static DOWN_KEY_PRESS: bool = false;
  public static SPACE_KEY_PRESS: bool = false;
  public asteroidArray: Array<Asteroid> = new Array<Asteroid>();
  public explosionArray: Array<Explosion> = new Array<Explosion>();
  public bulletArray: Array<Bullet> = new Array<Bullet>();
  public playerShip: PlayerShip = new PlayerShip();

  public asteroidIndex: i32 = 0;
  public explosionIndex: i32 = 0;
  public bulletIndex: i32 = 0;
  public bulletCoolDown: i32 = 50;

  public level: i32 = 0;

  constructor() {
    
    if( AsteroidShooter.SN == null ) {
      AsteroidShooter.SN = this;
    }
    AsteroidShooter.RENDERER = new Renderer();

    for( var i: i32 = 0; i < 30; i++ ) {
      this.asteroidArray.push( new Asteroid() );
    }

    this.asteroidArray[0].activate(0.25, -0.5,  0.5)
    this.asteroidArray[1].activate(0.25,  0.5,  0.5)
    this.asteroidArray[2].activate(0.25, -0.5, -0.5)
    this.asteroidArray[3].activate(0.25,  0.5, -0.5)
    this.asteroidArray[4].activate(0.25,  0.7, -0.2)


    for( i = 0; i < 30; i++ ) {
      this.explosionArray.push( new Explosion() );
    }

    for( i = 0; i < 50; i++ ) {
      this.bulletArray.push( new Bullet() );
    }
    
  }

  public respawnCheck(): void {
    for( var i: i32 = 0; i < this.asteroidArray.length; i++ ) {
      if( this.asteroidArray[i].visible == true ) {
        return;
      }
    }
    this.asteroidArray[0].activate(0.25, -0.5,  0.5)
    this.asteroidArray[1].activate(0.25,  0.5,  0.5)
    this.asteroidArray[2].activate(0.25, -0.5, -0.5)
    this.asteroidArray[3].activate(0.25,  0.5, -0.5)
    this.asteroidArray[4].activate(0.25,  0.7, -0.2)

  }

  public activateExplosion(x: f32, y: f32 ): void {
      let count: i32 = 0;
      this.explosionIndex++;
      if( this.explosionIndex >= this.explosionArray.length ) {
        this.explosionIndex = 0;
      }      
      while( this.explosionArray[this.explosionIndex].visible == true ) {
        this.explosionIndex++;
        if( this.explosionIndex >= this.explosionArray.length ) {
          this.explosionIndex = 0;
        }      
        if( count++ > 50 ) break;
      }
      this.explosionArray[this.explosionIndex].activate(x, y);
  }

  public activateAsteroid(size: f32, x: f32, y: f32 ): void {
      let count: i32 = 0;
      this.asteroidIndex++;
      if( this.asteroidIndex >= this.asteroidArray.length ) {
        this.asteroidIndex = 0;
      }      
      while( this.asteroidArray[this.asteroidIndex].visible == true ) {
        this.asteroidIndex++;
        if( this.asteroidIndex >= this.asteroidArray.length ) {
          this.asteroidIndex = 0;
        }      
        if( count++ > 50 ) break;
      }
      this.asteroidArray[this.asteroidIndex].activate(size, x, y)
  }

}

  const game: AsteroidShooter = new AsteroidShooter();


  export function StartGame(): void {

  }


  export function LoopCallback( delta_ms: i32, 
                          leftKeyPress: bool, rightKeyPress: bool, 
                          upKeyPress: bool, downKeyPress: bool,
                          spaceKeyPress: bool ): void {
    AsteroidShooter.SN.bulletCoolDown -= delta_ms;
    if( AsteroidShooter.SN.bulletCoolDown < 0 ) AsteroidShooter.SN.bulletCoolDown = 0;

    AsteroidShooter.RENDERER.clear();
    AsteroidShooter.DELTA_MS = delta_ms;
    Renderer.DELTA = <f32>delta_ms / 1000.0;
    AsteroidShooter.LEFT_KEY_PRESS = leftKeyPress;
    AsteroidShooter.RIGHT_KEY_PRESS = rightKeyPress;
    AsteroidShooter.UP_KEY_PRESS = upKeyPress;
    AsteroidShooter.DOWN_KEY_PRESS = downKeyPress;
    AsteroidShooter.SPACE_KEY_PRESS = spaceKeyPress;
  
    for( var i: i32 = 0; i < AsteroidShooter.SN.asteroidArray.length; i++ ) {
      AsteroidShooter.SN.asteroidArray[i].move();
      AsteroidShooter.SN.asteroidArray[i].draw();
    }

    if( leftKeyPress ) {
      AsteroidShooter.SN.playerShip.turnLeft();  
    }
    if( rightKeyPress ) {
      AsteroidShooter.SN.playerShip.turnRight();  
    }
    if( upKeyPress ) {
      AsteroidShooter.SN.playerShip.accelerate();  
    }

    if( spaceKeyPress && AsteroidShooter.SN.bulletCoolDown <= 0 ) {

      AsteroidShooter.SN.bulletCoolDown = AsteroidShooter.LAUNCH_WAIT;
      let count: i32 = 0;
      AsteroidShooter.SN.bulletIndex++;
      if( AsteroidShooter.SN.bulletIndex >= AsteroidShooter.SN.bulletArray.length ) {
        AsteroidShooter.SN.bulletIndex = 0;
      }      
      while( AsteroidShooter.SN.bulletArray[AsteroidShooter.SN.bulletIndex].visible == true ) {
        AsteroidShooter.SN.bulletIndex++;
        if( AsteroidShooter.SN.bulletIndex >= AsteroidShooter.SN.bulletArray.length ) {
          AsteroidShooter.SN.bulletIndex = 0;
        }      
        if( count++ > 50 ) break;
      }
      AsteroidShooter.SN.bulletArray[AsteroidShooter.SN.bulletIndex].launch(AsteroidShooter.SN.playerShip.rotation, 
              AsteroidShooter.SN.playerShip.position );
    }

    for( i = 0; i < AsteroidShooter.SN.bulletArray.length; i++ ) {
      AsteroidShooter.SN.bulletArray[i].move();
      AsteroidShooter.SN.bulletArray[i].draw();
      if( AsteroidShooter.SN.bulletArray[i].visible == true ) {
        for( var j: i32 = 0; j < AsteroidShooter.SN.asteroidArray.length; j++ ) {
          if( AsteroidShooter.SN.asteroidArray[j].visible == true && 
              AsteroidShooter.SN.bulletArray[i].hitTest(AsteroidShooter.SN.asteroidArray[j]) ) {
            AsteroidShooter.SN.activateExplosion(
              AsteroidShooter.SN.asteroidArray[j].position.x,
              AsteroidShooter.SN.asteroidArray[j].position.y
            );

            if( AsteroidShooter.SN.asteroidArray[j].scale >= 0.05 ) {
              const half_scale = AsteroidShooter.SN.asteroidArray[j].scale / 2;
              const asteroid_x = AsteroidShooter.SN.asteroidArray[j].position.x;
              const asteroid_y = AsteroidShooter.SN.asteroidArray[j].position.y;
              AsteroidShooter.SN.activateAsteroid(
                            half_scale,
                            asteroid_x + half_scale, 
                            asteroid_y - half_scale );            
              AsteroidShooter.SN.activateAsteroid(
                            half_scale, 
                            asteroid_x - half_scale, 
                            asteroid_y + half_scale );            
            }

            AsteroidShooter.SN.bulletArray[i].visible = false;
            AsteroidShooter.SN.asteroidArray[j].visible = false;
            break;
          }
        }
      }
    }

    for( i = 0; i < AsteroidShooter.SN.explosionArray.length; i++ ) {
      AsteroidShooter.SN.explosionArray[i].move();
      AsteroidShooter.SN.explosionArray[i].draw();
    }
    AsteroidShooter.SN.playerShip.move();
    AsteroidShooter.SN.playerShip.draw();

    AsteroidShooter.SN.respawnCheck();

  }

