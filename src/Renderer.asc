import {
  WebGLShader, shaderSource, createShader, compileShader, 
  VERTEX_SHADER, FRAGMENT_SHADER, createProgram, WebGLProgram,
  attachShader, useProgram, WebGLUniformLocation, getUniformLocation,
  uniform4fv, uniform2fv, uniform1f, linkProgram, WebGLRenderingContext,
  createBuffer, WebGLBuffer, ARRAY_BUFFER, LINK_STATUS, COMPILE_STATUS,
  STATIC_DRAW, GLint, FLOAT, LINE_LOOP, COLOR_BUFFER_BIT,
  enableVertexAttribArray, bindBuffer, createContextFromCanvas,
  getProgramInfoLog, getShaderInfoLog, clearColor, clear,
  bufferData, getAttribLocation, drawArrays, getShaderParameter,
  vertexAttribPointer, GLuint,
} from './webgl';

import {Vector} from './Vector';
/*
const V_COLOR_LINE_SHADER:string = `#version 300 es
  precision highp float;

  uniform vec4 u_color;

  in vec2 position;
  out vec4 c;
  
  void main() {
    gl_Position = vec4( position, 0.0, 1.0 );
    c = u_color/255.0;
  }
`;
*/
const V_COLOR_LINE_SHADER:string = `#version 300 es
  precision highp float;

  uniform vec4 u_color;
  uniform float u_scale;
  uniform float u_rotation;
  uniform float u_offset_x;
  uniform float u_offset_y;

  in vec2 position;
  out vec4 c;
  
  void main() {
    vec2 pos = (position * u_scale);

    float cosine = cos(u_rotation);
    float sine = sin(u_rotation);
    float x = (cosine * pos.x) + (sine * pos.y);
    float y = (cosine * pos.y) - (sine * pos.x);
    pos.x = x + u_offset_x;
    pos.y = y + u_offset_y;


    gl_Position = vec4( pos, 0.0, 1.0 );
    c = u_color;
  }
`;
// THIS IS THE FRAGMENT SHADER
const F_SHADER:string = `#version 300 es
  precision highp float;

  in vec4 c;
  out vec4 color;

  void main() {
    color = c;
  }
`;

var gl:WebGLRenderingContext;

export class Renderer {
  public static SN: Renderer; // SINGLETON
  public static DELTA: f32;

  // MAY NEED FRAME DATA ARRAY
  public loaded: bool = false;
  public color_line_program:WebGLProgram;
  public loop_color: StaticArray<f32> = [1.0, 1.0, 0.0, 1.0];
  public color_location:WebGLUniformLocation;
  public scale_location:WebGLUniformLocation;
  public rotation_location:WebGLUniformLocation;
  public offset_x_location:WebGLUniformLocation;
  public offset_y_location:WebGLUniformLocation;

  constructor() {
    if( Renderer.SN == null ) {
      Renderer.SN = this;
    }

    gl = createContextFromCanvas('cnvs', 'webgl2');
    let color_line_vertex_shader: WebGLShader = createShader(gl, VERTEX_SHADER);
    shaderSource(gl, color_line_vertex_shader, V_COLOR_LINE_SHADER);
    compileShader(gl, color_line_vertex_shader);

    let fragment_shader: WebGLShader = createShader(gl, FRAGMENT_SHADER);
    shaderSource( gl, fragment_shader, F_SHADER);
    compileShader( gl, fragment_shader );

    this.color_line_program = createProgram(gl);

    attachShader(gl, this.color_line_program, color_line_vertex_shader);
    attachShader(gl, this.color_line_program, fragment_shader);

    linkProgram( gl, this.color_line_program );

    useProgram( gl, this.color_line_program );

    this.color_location = getUniformLocation(gl, this.color_line_program, "u_color");
    this.scale_location = getUniformLocation(gl, this.color_line_program, "u_scale");
    this.rotation_location = getUniformLocation(gl, this.color_line_program, "u_rotation");
    this.offset_x_location = getUniformLocation(gl, this.color_line_program, "u_offset_x");
    this.offset_y_location = getUniformLocation(gl, this.color_line_program, "u_offset_y");


  }

  public clear(): void {
    clearColor(gl, 0.0, 0.0, 0.0, 1.0);
    clear(gl, COLOR_BUFFER_BIT);
  }

  public renderLineLoop(line_data: StaticArray<f32>, offset: Vector, rotation: f32, scale: f32, color_data: StaticArray<f32> = [1.0, 1.0, 1.0, 1.0]): void {
    let buffer:WebGLBuffer = createBuffer(gl);
//    let offset_arr: StaticArray<f32> = [0.0, 0.0]; //[offset.x, offset.y];
    bindBuffer(gl, ARRAY_BUFFER, buffer);
    store<u32>(changetype<usize>(line_data) - 8, idof<StaticArray<f32>>());
    bufferData<f32>(gl, ARRAY_BUFFER, line_data, STATIC_DRAW);

    let position_al: GLint = getAttribLocation(gl, this.color_line_program, 'position');
    enableVertexAttribArray(gl, position_al);

    store<u32>(changetype<usize>(color_data) - 8, idof<StaticArray<f32>>());
    uniform4fv(gl, this.color_location, color_data); 
    uniform1f(gl, this.scale_location, scale); 
    uniform1f(gl, this.rotation_location, rotation); 
    uniform1f(gl, this.offset_x_location, offset.x); 
    uniform1f(gl, this.offset_y_location, offset.y); 

    const dimensions:i32 = 2;
    const data_type: i32 = FLOAT;
    const normalize: i32 = false;
    const stride:i32 = 0;
    const offset:i32 = 0;

    vertexAttribPointer(gl, position_al, dimensions, data_type, normalize, stride, offset);

    drawArrays(gl, LINE_LOOP, 0, line_data.length/2);
  }

}
