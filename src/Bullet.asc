import {Vector} from './Vector';
import {Renderer} from './Renderer';
import {Asteroid} from './Asteroid';

export class Bullet {
  public static SCALAR_V: f32 = 0.05;

  // PRE SCALE THIS
  public lineLoop: StaticArray<f32> = [-0.01,0.01,0,0.04,0.01,0.01,0.04,0,0.01,-0.01,0,-0.04,-0.01,-0.01,-0.04,0,];
  public radius: f32 = 0.5;
  public scale: f32 = 0.5;
  public scaledRadius: f32 = 0.1;

  public rotation: f32 = 0.0;
  public player: bool = true;
  public velocity: Vector = new Vector();

  // i may need a get / set for these
  public position: Vector = new Vector();
  public visible: bool = false;

  constructor( player: bool = true ) {
    this.player = player;
  }

  public move(): void {
    if( this.visible == true ) {
      this.position.add(this.velocity);  
      this.rotation += 0.75;
      if( this.rotation > 6.283 ) {
        this.rotation -= 6.283;
      }

      if( this.position.x < -1 - this.scale || this.position.x > 1 + this.scale || 
          this.position.y < -1 - this.scale || this.position.y > 1 + this.scale ) {
            this.visible = false;
      }
    }
  }

  public draw(): void {
    if( this.visible == true ) {
      Renderer.SN.renderLineLoop(this.lineLoop, this.position, this.rotation, this.scale, [1.0, 1.0, 0.0, 1.0] );
    }
  }

  public launch( ship_angle: f32, ship_position: Vector ): void {
    const half_of_three_x_pi: f32 = 4.71238898;

    this.position.copy(ship_position);
    this.visible = true;

    // use ship_angle to calculate velocity
    this.velocity.x = 0.05;
    this.velocity.y = 0.0;
    this.velocity.rotate(ship_angle - half_of_three_x_pi);
  }

  public hitTest( asteroid: Asteroid ): bool {
    let rad_sum_sq: f32 = asteroid.scaledRadius + this.scaledRadius;
    rad_sum_sq *= rad_sum_sq;
    let x_dist: f32 = this.position.x - asteroid.position.x;
    let y_dist: f32 = this.position.y - asteroid.position.y;
    let dist_sq: f32 = x_dist * x_dist + y_dist * y_dist;

    if( dist_sq < rad_sum_sq ) {
      return true;
    }
    return false;
  }
}