import {Vector} from './Vector';
import {Renderer} from './Renderer';

export class PlayerShip {
  // readonly static properties of PlayerShip
  static readonly TWO_PI: f32 = 6.2831853;
  static readonly ACCELERATION: f32 = 0.005;
  static readonly ROTATE_VEL: f32 = 0.04;
  static readonly MAX_VEL_SQ: f32 = 0.09;
  static readonly MAX_VEL: f32 = 0.3;  

  // movement, position, scale and rotation
  public velocity: Vector = new Vector();
  public delta_velocity: Vector = new Vector();
  public direction: Vector = new Vector(0.0, -1.0);
  public acceleration: Vector = new Vector();
  public position: Vector = new Vector();

  // scale and rotation
  public scale: f32 = 0.1;
  public rotation: f32 = 3.14159;

  // position loop data
  public shipBody:StaticArray<f32> = [-0.1,-0.7,
                                      0.1,-0.7,
                                      0.5,0.1,
                                      0.5,0.5,
                                      0,0.4,
                                      -0.5,0.5,
                                      -0.5,0.1,];
  public shipCockpit:StaticArray<f32> = [0,-0.6,
                                        -0.2,0,
                                        0,-0.1,
                                        0.2,0,];
  public leftGun:StaticArray<f32>  = [-0.4,-0.1,
                                      -0.4,-0.5,
                                      -0.3,-0.5,
                                      -0.3,-0.3,];
  public rightGun:StaticArray<f32> = [ 0.3,-0.3, 
                                      0.3,-0.5, 
                                      0.4,-0.5, 
                                      0.4,-0.1,];

  public move(): void {
    if( this.velocity.magSq() > PlayerShip.MAX_VEL_SQ ) {
      this.velocity.normalize(PlayerShip.MAX_VEL);
    }

    // the delta_velocity
    this.delta_velocity.copy( this.velocity );
    this.delta_velocity.multiply( Renderer.DELTA );
    this.position.add( this.delta_velocity );

    if( this.position.x < -1 - this.scale/2 ) {
      this.position.x = 1 + this.scale / 3;
    }
    else if( this.position.x > 1 + this.scale/2 ) {
      this.position.x = -1 - this.scale / 3;
    }

    if( this.position.y < -1 - this.scale/2 ) {
      this.position.y = 1 + this.scale / 3;
    }
    else if( this.position.y > 1 + this.scale/2 ) {
      this.position.y = -1 - this.scale / 3;
    }

  }

  public draw(): void {
    Renderer.SN.renderLineLoop(this.shipBody, this.position, this.rotation, this.scale, 0x00_ff_00_ff );
    Renderer.SN.renderLineLoop(this.shipCockpit, this.position, this.rotation, this.scale, 0x00_ff_ff_ff );
    Renderer.SN.renderLineLoop(this.leftGun, this.position, this.rotation, this.scale, 0xa1_00_00_ff );
    Renderer.SN.renderLineLoop(this.rightGun, this.position, this.rotation, this.scale, 0xa1_00_00_ff );
  }

  public accelerate(): void {
    const half_of_three_pi: f32 = 4.71238898;

    this.velocity.y += Mathf.sin(half_of_three_pi - this.rotation) * (PlayerShip.ACCELERATION * Renderer.DELTA);
    this.velocity.x += Mathf.cos(half_of_three_pi - this.rotation) * (PlayerShip.ACCELERATION * Renderer.DELTA);

  }

  public turnLeft(): void {
    this.rotation -= PlayerShip.ROTATE_VEL;
    if( this.rotation < 0.0 ) {
      this.rotation += PlayerShip.TWO_PI;
    }
    this.direction.rotate( this.rotation );
    this.acceleration.copy( this.direction );
    this.acceleration.normalize(PlayerShip.ACCELERATION);
  }

  public turnRight(): void {
    this.rotation += PlayerShip.ROTATE_VEL;
    if( this.rotation >= PlayerShip.TWO_PI ) {
      this.rotation -= PlayerShip.TWO_PI;
    }
    this.direction.rotate( this.rotation );
    this.acceleration.copy( this.direction );
    this.acceleration.normalize(PlayerShip.ACCELERATION);
  }

}