import {Bullet} from './Bullet';
import {Explosion} from './Explosion';
import {Vector} from './Vector';
import {Renderer} from './Renderer';

export class PlayerShip {
  public static SN: PlayerShip;
  // FIGURE OUT A WAY TO MAKE THE FLOATS INTO INTS
  public static SHOT_WAIT: i32 = 500;
  public static EXHAUST_WAIT: i32 = 50;
  public static TWO_PI: f32 = 6.2831853;

  public static ACCELERATION: f32 = 0.005;
  public static ROTATE_VEL: f32 = 0.04;
  public static MAX_VEL_SQ: f32 = 0.0001;
  public static MAX_VEL: f32 = 0.01;  

  public velocity: Vector = new Vector();
  public direction: Vector = new Vector(0.0, -1.0);
  public acc: Vector = new Vector();
  public position: Vector = new Vector();
  public scale: f32 = 0.1;
  public rotation: f32 = 3.14159;

  public radius: f32 = 0.05;
  public lives: i32 = 3;

  // ADD EXHAUST
  public shipBody:StaticArray<f32> = [-0.1,-0.7,
                                      0.1,-0.7,
                                      0.5,0.1,
                                      0.5,0.5,
                                      0,0.4,
                                      -0.5,0.5,
                                      -0.5,0.1,];
  public shipCockpit:StaticArray<f32> = [0,-0.6,
                                        -0.2,0,
                                        0,-0.1,
                                        0.2,0,];
  public leftGun:StaticArray<f32>  = [-0.4,-0.1,
                                      -0.4,-0.5,
                                      -0.3,-0.5,
                                      -0.3,-0.3,];
  public rightGun:StaticArray<f32> = [ 0.3,-0.3, 
                                      0.3,-0.5, 
                                      0.4,-0.5, 
                                      0.4,-0.1,];

  // these are timing variables and may require floats
  public invulnerableCountdown: i32 = 60; // this was 2, but I think it is 2 seconds.
  public wait: i32 = 50; // this was 1 but I think it meant 1 second
  public shotCooldown: i32 = 200;
  public visible: bool = true;

  constructor() {
  }

  public destroy(): void {
    // run explosion
    this.visible = false;
  }

  public respawn(): void {
    if( this.lives > 0 ) {
      this.lives--;
      this.visible = true;
    }
  }

  public asteroidCollision( a: Asteroid ) : bool {
    return false;
  }

  public move(): void {
    if( this.visible == false ) {
      return;
    }
    if( this.velocity.magSq() > PlayerShip.MAX_VEL_SQ ) {
      this.velocity.normalize(PlayerShip.MAX_VEL);
    }
    this.position.add( this.velocity );

    if( this.position.x < -1 - this.scale/2 ) {
      this.position.x = 1 + this.scale / 3;
    }
    else if( this.position.x > 1 + this.scale/2 ) {
      this.position.x = -1 - this.scale / 3;
    }

    if( this.position.y < -1 - this.scale/2 ) {
      this.position.y = 1 + this.scale / 3;
    }
    else if( this.position.y > 1 + this.scale/2 ) {
      this.position.y = -1 - this.scale / 3;
    }

  }

  public draw(): void {
    if( this.visible == true ) {
      Renderer.SN.renderLineLoop(this.shipBody, this.position, this.rotation, this.scale, [0.0, 1.0, 0.0, 1.0] );
      Renderer.SN.renderLineLoop(this.shipCockpit, this.position, this.rotation, this.scale, [0.0, 1.0, 1.0, 1.0] );
      Renderer.SN.renderLineLoop(this.leftGun, this.position, this.rotation, this.scale, [1.0, 0.0, 0.0, 1.0] );
      Renderer.SN.renderLineLoop(this.rightGun, this.position, this.rotation, this.scale, [1.0, 0.0, 0.0, 1.0] );
    }
  }

  public accelerate(): void {
    //this.velocity.add(this.acc);
    //ACCELERATION
    if( this.visible == false ) {
      return;
    }
    const half_of_three_x_pi: f32 = 4.71238898;

    this.velocity.y += Mathf.sin(half_of_three_x_pi - this.rotation) * (PlayerShip.ACCELERATION * Renderer.DELTA);
    this.velocity.x += Mathf.cos(half_of_three_x_pi - this.rotation) * (PlayerShip.ACCELERATION * Renderer.DELTA);

  }

  public turnLeft(): void {
    this.rotation -= PlayerShip.ROTATE_VEL;
    if( this.rotation < 0.0 ) {
      this.rotation += PlayerShip.TWO_PI;
    }
    this.direction.rotate( this.rotation );
    this.acc.copy( this.direction );
    this.acc.normalize(PlayerShip.ACCELERATION);
  }

  public turnRight(): void {
    this.rotation += PlayerShip.ROTATE_VEL;
    if( this.rotation >= PlayerShip.TWO_PI ) {
      this.rotation -= PlayerShip.TWO_PI;
    }
    this.direction.rotate( this.rotation );
    this.acc.copy( this.direction );
    this.acc.normalize(PlayerShip.ACCELERATION);
  }

  public shoot(): void {
    
  }


}