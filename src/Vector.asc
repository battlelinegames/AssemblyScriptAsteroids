export class Vector {
  public x: f32 = 0.0;
  public y: f32 = 0.0;

  constructor( x: f32 = 0.0, y: f32 = 0.0) {
    this.x = x;
    this.y = y;
  }
  // get the magnitude (length) of a vector
  public magnitude() : f32 {
    return Math.sqrt<f32>(this.x * this.x + this.y * this.y);
  }

  // get the squared magnitude of a vector
  public magSq():f32 {
    return this.x * this.x + this.y * this.y;
  }

  // normalize a vector by giving it a specific length (default of 1)
  public normalize(magnitude: f32 = 1.0): Vector {
    let len: f32 = Mathf.sqrt(this.x * this.x + this.y * this.y);
    if( len == 0 ) {
      // don't want to divide by 0
      return this;
    }

    this.x /= len;
    this.y /= len;

    this.x *= magnitude;
    this.y *= magnitude;

    return this;
  }

  // set x and y values to 0.
  public zero(): void {
    this.x = 0;
    this.y = 0;
  }

  // copy the values in a second vector to this vector
  public copy( second : Vector ): void {
    this.x = second.x;
    this.y = second.y;
  }

  // rotate the angle of this vector by the radians parameter
  public rotate(radians: f32 ): void {
        let cos: f32 = Mathf.cos(radians);
        let sin: f32 = Mathf.sin(radians);
        let x: f32 = (cos * this.x) + (sin * this.y);
        let y: f32 = (cos * this.y) - (sin * this.x);
        this.x = x;
        this.y = y;
  }

  // find the angle of this vector
  public getAngle(): f32 {
      return Math.atan2(this.x, this.y);
  }

  // multiply the vector by a scalar value
  public multiply(scalar: f32): void {
      this.x *= scalar;
      this.y *= scalar;
  }

  // add x and y values to this vector
  public addXY(x: f32, y: f32): void {
      this.x += this.x;
      this.y += this.y;
  }

  // add a second vector to this vector
  public add(value: Vector): void {
      this.x += value.x;
      this.y += value.y;
  }

  // subtract a second vector to this vector
  public subtract(value: Vector): void {
      this.x -= value.x;
      this.y -= value.y;
  }
}