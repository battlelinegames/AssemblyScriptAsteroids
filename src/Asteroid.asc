import {Bullet} from './Bullet';
import {Explosion} from './Explosion';
import {Vector} from './Vector';
import {Renderer} from './Renderer';

export class Asteroid {
  public rotationV: f32 = 0.0;
  public scale: f32 = 1.0;
  public radius: f32 = 0.25;
  public scaledRadius: f32 = 0.1;

  public halfscale: f32 = 0.5;
  public rotation: f32 = 0.0;

  public position: Vector = new Vector();
  public velocity: Vector = new Vector();
  public delta_velocity: Vector = new Vector();

  public visible:bool;

  public asteroidLineLoop: StaticArray<f32> = [-0.5,0.3,-0.3,0.5,-0.1,0.5,0.1,0.4,0.3,0.5,0.5,0.3,0.4,0,0.5,
                                          -0.3,0.3,-0.5,0,-0.4,-0.3,-0.5,-0.5,-0.3,-0.4,-0.2,-0.5,0,];

  constructor() {
    this.visible = false;
  }

  public destroy() : void {
    AsteroidShooter.SN.activateExplosion(position.x, position.y);
  }

  public bulletCollision( b: Bullet ) : bool {
    return false;
  }

  public draw(): void {
    if( this.visible == true ) {
      Renderer.SN.renderLineLoop(this.asteroidLineLoop, this.position, this.rotation, this.scale, 0xff_84_00_ff );
    }
  }

  public move(): void {
    if( this.visible == true ) {
      this.delta_velocity.copy( this.velocity );
      this.delta_velocity.multiply( Renderer.DELTA );
      this.position.add(this.delta_velocity);  

      this.rotation += this.rotationV;
      if( this.position.x < -1 - this.scale/2 ) {
        this.position.x = 1 + this.scale / 3;
      }
      else if( this.position.x > 1 + this.scale/2 ) {
        this.position.x = -1 - this.scale / 3;
      }

      if( this.position.y < -1 - this.scale/2 ) {
        this.position.y = 1 + this.scale / 3;
      }
      else if( this.position.y > 1 + this.scale/2 ) {
        this.position.y = -1 - this.scale / 3;
      }

    }
  }

  public activate(scale: f32, x: f32, y: f32 ):void {
    this.visible = true;
    this.scale = scale;
    this.halfscale = scale / 2;
    this.scaledRadius = this.scale * this.radius;

    this.rotation = Mathf.random() * 3.14159;
    this.rotationV = (Mathf.random() - 0.5) * 0.01;

    this.position.x = x;
    this.position.y = y;

    this.velocity.x = (Mathf.random() - 0.5) * 0.3;
    this.velocity.y = (Mathf.random() - 0.5) * 0.3;
  }
}